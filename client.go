// Generated by [optioner] command-line tool; DO NOT EDIT
// If you have any questions, please create issues and submit contributions at:
// https://github.com/chenmingyong0423/go-optioner

// Copyright 2024 chenmingyong0423

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package httpchain

import (
	"net/http"
	"net/url"
)

func NewWithClient(client *http.Client) *Client {
	return &Client{
		client:      client,
		headers:     make(http.Header),
		queryValues: make(url.Values),
	}
}

func NewDefault() *Client {
	return &Client{
		client:      http.DefaultClient,
		headers:     make(http.Header),
		queryValues: make(url.Values),
	}
}

type Client struct {
	client      *http.Client
	headers     http.Header
	queryValues url.Values
}

func (c *Client) AddQuery(key, value string) *Client {
	c.queryValues.Add(key, value)
	return c
}

func (c *Client) SetQuery(key, value string) *Client {
	c.queryValues.Set(key, value)
	return c
}

func (c *Client) SetHeader(key, value string) *Client {
	c.headers.Set(key, value)
	return c
}

func (c *Client) AddHeader(key, value string) *Client {
	c.headers.Add(key, value)
	return c
}

func (c *Client) Request(url, method string) *Request {
	return &Request{
		url:         url,
		method:      method,
		headers:     c.headers,
		queryValues: c.queryValues,
		client:      c.client,
	}
}

func (c *Client) Get(url string) *Request {
	return c.Request(url, http.MethodGet)
}

func (c *Client) Post(url string) *Request {
	return c.Request(url, http.MethodPost)
}

func (c *Client) Put(url string) *Request {
	return c.Request(url, http.MethodPut)
}

func (c *Client) Delete(url string) *Request {
	return c.Request(url, http.MethodDelete)
}

func (c *Client) Patch(url string) *Request {
	return c.Request(url, http.MethodPatch)
}

func (c *Client) Head(url string) *Request {
	return c.Request(url, http.MethodHead)
}

func (c *Client) Options(url string) *Request {
	return c.Request(url, http.MethodOptions)
}

func (c *Client) Connect(url string) *Request {
	return c.Request(url, http.MethodConnect)
}

func (c *Client) Trace(url string) *Request {
	return c.Request(url, http.MethodTrace)
}
